{"version":3,"sources":["components/login/Counter.module.css","redux/actions/counterAPI.js","redux/actions/login.js","components/login/index.js","App.js","redux/reducers/login.js","app/store.js","serviceWorker.js","index.js"],"names":["module","exports","fetchCount","amount","Promise","resolve","setTimeout","data","login","createAsyncThunk","a","rejectWithValue","Login","useSelector","state","user","dispatch","useDispatch","useState","incrementAmount","incrementValue","Number","React","email","setEmail","password","setPassword","className","styles","row","style","marginTop","type","margin","padding","placeholder","onChange","e","target","value","asyncButton","onClick","alert","App","userSlice","createSlice","name","initialState","isLoading","reducers","extraReducers","pending","fulfilled","action","payload","rejected","error","store","configureStore","reducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,IAAM,qBAAqB,MAAQ,uBAAuB,OAAS,wBAAwB,QAAU,yBAAyB,YAAc,qD,2KCAvJ,SAASC,IAAwB,IAAbC,EAAY,uDAAH,EAClC,OAAO,IAAIC,SAAQ,SAACC,GAAD,OACjBC,YAAW,kBAAMD,EAAQ,CAAEE,KAAMJ,MAAW,QCDzC,IAAMK,EAAQC,YACjB,qBADiC,uCAEjC,iCAAAC,EAAA,6DAAQP,EAAR,EAAQA,OAAUQ,EAAlB,EAAkBA,gBAAlB,kBAEYT,EAAWC,GAFvB,iGAIMQ,EAAgB,EAAD,KAJrB,yDAFiC,yD,wBCG9B,SAASC,IACGC,aAAY,SAACC,GAAD,OAAWA,KAAhCC,KAAR,IACMC,EAAWC,cACjB,EAA8CC,mBAAS,KAAvD,mBAAOC,EAAP,KAEMC,GAFN,KAEuBC,OAAOF,IAAoB,GAElD,EAA0BG,IAAMJ,SAAS,IAAzC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAAgCF,IAAMJ,SAAS,IAA/C,mBAAOO,EAAP,KAAiBC,EAAjB,KAeA,OACE,8BACE,sBAAKC,UAAWC,IAAOC,IAAKC,MAAO,CAACC,UAAW,SAA/C,UACE,uBAAOC,KAAK,OAAOF,MAAO,CAACG,OAAQ,MAAOC,QAAS,QAASC,YAAY,QAAQC,SAX7D,SAACC,GACtBb,EAASa,EAAEC,OAAOC,UAYhB,uBAAOP,KAAK,OAAOF,MAAO,CAACG,OAAQ,MAAOC,QAAS,QAASC,YAAY,WAAWC,SAT7D,SAACC,GACzBX,EAAYW,EAAEC,OAAOC,UAUnB,wBACEZ,UAAWC,IAAOY,YAClBC,QAvBY,WAChBC,MAAMnB,GACNmB,MAAMjB,GACNT,EAASR,EAAMY,KAkBb,8B,MCvBOuB,I,EAAAA,EARf,WACE,OACE,qBAAKhB,UAAU,MAAf,SACG,cAACf,EAAD,O,OCuBQgC,EArBGC,YAAY,CAC7BC,KAAM,OACNC,aANoB,CACpBC,WAAW,GAMXC,SAAU,GACVC,eAAa,mBAEX1C,EAAM2C,SAAU,SAACrC,GACjBA,EAAMkC,WAAY,KAHP,cAKXxC,EAAM4C,WAAY,SAACtC,EAAOuC,GAC1B,IAAO9C,EAAQ8C,EAAOC,QAAf/C,KACPO,EAAMyB,MAAOhC,KAPF,cASXC,EAAM+C,UAAW,SAACzC,EAAOuC,GACzBvC,EAAMkC,WAAY,EAClBlC,EAAM0C,MAAQH,EAAOC,QAAQE,SAXlB,KCVDC,EAAQC,YAAe,CAClCC,QAAS,CACP5C,KAAM6B,EAAUe,WCOAC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUV,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJW,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.785a579e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__3Vx9O\",\"value\":\"Counter_value__1koVe\",\"button\":\"Counter_button__1VzYs\",\"textbox\":\"Counter_textbox__ruMhb\",\"asyncButton\":\"Counter_asyncButton__92K1i Counter_button__1VzYs\"};","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\nexport const login = createAsyncThunk(\n    'counter/fetchCount',\n    async ({amount}, {rejectWithValue}) => {\n        try {\n\t\t\treturn await fetchCount(amount);\n\t\t} catch (err) {\n\t\t\treturn rejectWithValue(err);\n\t\t}\n    }\n  );\n  ","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { login } from '../../redux/actions';\nimport styles from './Counter.module.css';\n\nexport function Login() {\n  const { user } = useSelector((state) => state);\n  const dispatch = useDispatch();\n  const [incrementAmount, setIncrementAmount] = useState('2');\n\n  const incrementValue = Number(incrementAmount) || 0;\n\n  const [email, setEmail] = React.useState('');\n  const [password, setPassword] = React.useState('');\n  const handleLogin = ()=>{\n      alert(email);\n      alert(password);\n      dispatch(login(incrementValue))\n  }\n\n  const handleEmailInput = (e)=>{\n      setEmail(e.target.value)\n  }\n\n  const handlePasswordInput = (e)=>{\n      setPassword(e.target.value)\n  }\n\n  return (\n    <div>\n      <div className={styles.row} style={{marginTop: '100px'}}>\n        <input type='text' style={{margin: '5px', padding: '10px'}} placeholder=\"email\" onChange={handleEmailInput}/>\n   \n        <input type='text' style={{margin: '5px', padding: '10px'}} placeholder=\"password\" onChange={handlePasswordInput}/>\n\n        <button\n          className={styles.asyncButton}\n          onClick={handleLogin}\n        >\n          Login MAgic\n        </button>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Login } from './components/login';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n       <Login />\n    </div>\n  );\n}\n\nexport default App;\n","import { createSlice } from '@reduxjs/toolkit';\nimport {\n\tlogin\n} from '../actions';\n\nconst initialState = {\n\tisLoading: true,\n};\n\nconst userSlice = createSlice({\n\tname: 'user',\n\tinitialState,\n\treducers: {},\n\textraReducers: {\n\n\t\t[login.pending]: (state) => {\n\t\t\tstate.isLoading = true;\n\t\t},\n\t\t[login.fulfilled]: (state, action) => {\n\t\t\tconst {data} = action.payload;\n\t\t\tstate.value= data;\n\t\t},\n\t\t[login.rejected]: (state, action) => {\n\t\t\tstate.isLoading = false;\n\t\t\tstate.error = action.payload.error;\n\t\t},\n\n\t},\n});\n\nexport default userSlice;\n","import { configureStore } from '@reduxjs/toolkit';\nimport userSlice from '../redux/reducers/login'\n\nexport const store = configureStore({\n  reducer: {\n    user: userSlice.reducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}