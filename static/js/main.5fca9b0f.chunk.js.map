{"version":3,"sources":["components/login/login.module.css","components/dashboard/dashboard.module.css","redux/actions/loginApis.js","redux/actions/login.js","components/login/index.js","components/dashboard/index.js","components/dashboard/constants.js","App.js","serviceWorker.js","redux/reducers/login.js","app/store.js","index.js"],"names":["module","exports","addProxy","url","handleLogin","email","password","axios","post","fetchResults","token","defaults","headers","common","get","login","createAsyncThunk","a","rejectWithValue","fetchResultsApi","Login","user","useSelector","state","dispatch","useDispatch","useState","setEmail","setPassword","tokenReceived","localStorage","getItem","tokenExpired","className","styles","row","type","placeholder","onChange","e","target","value","loginButton","onClick","error","to","timeInterval","Dashboard","results","savedToken","filteredResults","filter","eachData","event","sort","b","time","useEffect","clearInterval","setInterval","length","top","column","map","res","horse","id","name","authenticated","App","path","exact","render","props","pathname","from","location","component","Boolean","window","hostname","match","userSlice","createSlice","initialState","isLoading","reducers","extraReducers","pending","fulfilled","action","setItem","payload","data","rejected","push","response","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5fca9b0f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"login_row__2KzBg\",\"button\":\"login_button__1mFk-\",\"loginButton\":\"login_loginButton__2_ulT login_button__1mFk-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"top\":\"dashboard_top__FN0dB\",\"column\":\"dashboard_column__t1DRn\"};","import axios from 'axios';\n\nfunction addProxy(url){\n  // To navigate around CORS error, I hosted a proxy on Heroku server\n  return `https://sheltered-mountain-74311.herokuapp.com/${url}`\n}\nexport function handleLogin({email, password}) {\n  return axios.post(addProxy('http://35.207.169.147/auth'), {email, password})\n  \n}\n\nexport function fetchResults(token) {\n  axios.defaults.headers.common = {'Authorization': `Bearer ${token}`};\n  return axios.get(addProxy('http://35.207.169.147/results'))\n}\n\n\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { handleLogin, fetchResults as fetchResultsApi } from './loginApis';\nexport const login = createAsyncThunk(\n    'user/login',\n    async ({email, password}, {rejectWithValue}) => {\n        try {\n\t\t\treturn await handleLogin({email, password});\n\t\t} catch (err) {\n\t\t\treturn rejectWithValue(err);\n\t\t}\n    }\n);\n\nexport const fetchResults = createAsyncThunk(\n  'user/fetchResults',\n  async (token, {rejectWithValue}) => {\n      try {\n    return await fetchResultsApi(token);\n  } catch (err) {\n    return rejectWithValue(err);\n  }\n  }\n);\n\n\n  ","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Redirect } from 'react-router';\nimport { login } from '../../redux/actions';\nimport styles from './login.module.css';\n\nexport function Login() {\n  const { user } = useSelector((state) => state);\n  const dispatch = useDispatch();\n\n  const [email, setEmail] =useState('');\n  const [password, setPassword] = useState('');\n  const handleLogin = ()=>{\n      dispatch(login({email, password}))\n  }\n\n  const handleEmailInput = (e)=>{\n      setEmail(e.target.value)\n  }\n\n  const handlePasswordInput = (e)=>{\n      setPassword(e.target.value)\n  }\n\n  if((user.tokenReceived || localStorage.getItem('token'))&& !user.tokenExpired){\n    return <Redirect to=\"/dashboard\"/>\n  }\n\n  return (\n    <div>\n      <div className={styles.row}>\n        <input type='text' placeholder=\"email\" onChange={handleEmailInput}/>\n   \n        <input type='text' placeholder=\"password\" onChange={handlePasswordInput}/>\n\n        <button\n          className={styles.loginButton}\n          onClick={handleLogin}\n        >\n          Login\n        </button>\n        {user.error && \"Some Error occurred. Please try again\"}\n      </div>\n    </div>\n  );\n}\n","import { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { Redirect } from 'react-router';\nimport { fetchResults } from '../../redux/actions';\nimport styles from './dashboard.module.css'; \n// import the interval which the user likes to see the updates in\nimport {HALF_MINUTE} from './constants';\n\nlet timeInterval=0;\nexport function Dashboard() {\n  const dispatch = useDispatch();\n  const { user } = useSelector((state) => state);\n\n  const { results, tokenExpired }  = user;\n  const savedToken = localStorage.getItem('token');\n    // Filter the resuts based on the events that are finished and then sort.\n    // TODO: move this logic into a helper method.\n    let filteredResults = results.filter(eachData=> eachData.event === 'finish');\n    filteredResults = filteredResults.sort((a, b)=> a.time - b.time);\n   \n\n   \n    // TODO: implement websocket if the server pushes notification in realtime\n  const pollResults = ()=>{\n    clearInterval(timeInterval) \n    dispatch(fetchResults(savedToken));//Dispatch once and then set the intrval\n    timeInterval= setInterval(()=>{\n      dispatch(fetchResults(savedToken))\n    }, HALF_MINUTE)\n  }  \n  \n   useEffect(\n\t\t() =>{\n      pollResults()\n      //Clear the polling upon component unmount\n     return (()=>clearInterval(timeInterval))\n    }, []);\n\n\n  if(tokenExpired || !savedToken){\n    return <Redirect to='login'/>\n  }\n\n  if(!results.length){\n    return \"Fetching Results...\"\n  }\n\n  return (\n    <div>\n      <div className={styles.top}>\n        <h1>This is Dashboard</h1>\n\n        <div className={styles.column} >\n          <div>\n            <span>No.</span>\n            <span>Horse</span>\n            <span>Time</span>\n            <span>Event</span>\n          </div>\n            {\n              filteredResults.map(res=>{\n                return <div key={res.horse.id+res.time}>\n                  <span>{res.horse.id}</span>\n                  <span>{res.horse.name}</span>\n                  <span>{`${res.time/1000}s`}</span>\n                  <span>{res.event}</span>\n                </div>\n              })\n            }\n            {\n              !filteredResults.length && \"The race has just begin!\"\n            }\n       </div>\n       \n      </div>\n    </div>\n  );\n}\n","export const TEN_SECONDS = 10*1000;\nexport const TWENTY_SECONDS = 10*1000;\nexport const ONE_MINUTE = 1*60*1000;\nexport const HALF_MINUTE = 0.5*60*1000;\n","import React from 'react';\nimport { Login } from './components/login';\nimport { Dashboard } from './components/dashboard';\nimport { HashRouter, Route, Switch, Redirect } from 'react-router-dom';\nimport './App.css';\n\nconst authenticated = localStorage.getItem('token');\n\nfunction App() {\n  return (\n    <div className=\"App\">\n            <HashRouter>\n              <Switch>\n              <Route path=\"/\" \n                  exact\n                  render={(props) =>\n                    (\n                      <Redirect\n                        to={{\n                          pathname: authenticated? '/dashboard' : '/login',\n                          state: { from: props.location },\n                        }}\n                      />\n                    )\n                  }></Route>\n                <Route exact path=\"/login\" component={Login}></Route>\n                <Route path=\"/dashboard\" \n                  exact\n                  render={(props) =>\n                    authenticated ? (\n                      <Dashboard {...props} />\n                    ) : (\n                      <Redirect\n                        to={{\n                          pathname: '/login',\n                          state: { from: props.location },\n                        }}\n                      />\n                    )\n                  }></Route>\n              </Switch>\n            </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import { createSlice } from '@reduxjs/toolkit';\nimport {\n\tlogin,\n\tfetchResults,\n} from '../actions';\n\nconst initialState = {\n\tisLoading: true,\n\tresults: [],\n};\n\nconst userSlice = createSlice({\n\tname: 'user',\n\tinitialState,\n\treducers: {},\n\textraReducers: {\n\n\t\t[login.pending]: (state) => {\n\t\t\tstate.isLoading = true;\n\t\t},\n\t\t[login.fulfilled]: (state, action) => {\n\t\t\tlocalStorage.setItem('token', action.payload.data.token);\n\t\t\tstate.tokenReceived = action.payload.data.token;\n\t\t\tstate.results = [];\n\t\t\tstate.tokenExpired = false;\n\t\t},\n\t\t[login.rejected]: (state, action) => {\n\t\t\tstate.isLoading = false;\n\t\t\tstate.error = true;\n\t\t},\n\t\t[fetchResults.fulfilled]: (state, action) => {\n\t\t\tstate.results.push(action.payload.data);\n\t\t\tstate.error = false;\n\t\t},\n\t\t[fetchResults.rejected]: (state, action) => {\n\t\t\t// state.tokenExpired = true;\n\t\t\tif(action.payload.response.data.error === 'Access denied'){\n\t\t\t\tstate.tokenExpired = true;\n\t\t\t}\n\t\t}\n\t},\n});\n\nexport default userSlice;\n","import { configureStore } from '@reduxjs/toolkit';\nimport userSlice from '../redux/reducers/login';\n\nexport const store = configureStore({\n  reducer: {\n    user: userSlice.reducer,\n  },\n  middleware: (getDefaultMiddleware) =>\n  getDefaultMiddleware({\n    serializableCheck: false,\n  }),\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport {store} from './app/store'\n\n// const store = configureStore();\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}