{"version":3,"sources":["components/login/login.module.css","components/dashboard/dashboard.module.css","redux/actions/loginApis.js","redux/actions/login.js","components/login/index.js","components/dashboard/index.js","App.js","serviceWorker.js","redux/reducers/login.js","app/store.js","index.js"],"names":["module","exports","handleLogin","email","password","axios","post","fetchResults","token","defaults","headers","common","get","login","createAsyncThunk","a","rejectWithValue","fetchResultsApi","Login","user","useSelector","state","dispatch","useDispatch","React","useState","setEmail","setPassword","tokenReceived","tokenExpired","to","className","styles","row","style","marginTop","type","margin","padding","placeholder","onChange","e","target","value","asyncButton","onClick","error","Dashboard","results","savedToken","localStorage","getItem","event","horse","id","name","time","useEffect","top","column","authenticated","App","path","exact","render","props","pathname","from","location","component","Boolean","window","hostname","match","userSlice","createSlice","initialState","isLoading","reducers","extraReducers","pending","fulfilled","action","setItem","payload","data","rejected","response","store","configureStore","reducer","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2de8caea.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"login_row__2KzBg\",\"button\":\"login_button__1mFk-\",\"asyncButton\":\"login_asyncButton__3M5la login_button__1mFk-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"top\":\"dashboard_top__FN0dB\",\"column\":\"dashboard_column__t1DRn\"};","import axios from 'axios';\n\nexport function handleLogin({email, password}) {\n  return axios.post('https://cors-anywhere.herokuapp.com/'+'http://35.207.169.147/auth', {email, password})\n  return axios.get('https://api.github.com/users/hadley/orgs');\n  return fetch('https://api.github.com/users/hadley/orgs', {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    // body: JSON.stringify(data)\n   // body: JSON.stringify({email, password}) // body data type must match \"Content-Type\" header\n  })\n}\n\nexport function fetchResults(token) {\n  axios.defaults.headers.common = {'Authorization': `Bearer ${token}`};\n  return axios.get('https://cors-anywhere.herokuapp.com/'+'http://35.207.169.147/results',)\n}\n\n\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { handleLogin, fetchResults as fetchResultsApi } from './loginApis';\nexport const login = createAsyncThunk(\n    'user/login',\n    async ({email, password}, {rejectWithValue}) => {\n        try {\n\t\t\treturn await handleLogin({email, password});\n\t\t} catch (err) {\n\t\t\treturn rejectWithValue(err);\n\t\t}\n    }\n);\n\nexport const fetchResults = createAsyncThunk(\n  'user/fetchResults',\n  async (token, {rejectWithValue}) => {\n      try {\n    return await fetchResultsApi(token);\n  } catch (err) {\n    return rejectWithValue(err);\n  }\n  }\n);\n\n\n  ","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Redirect } from 'react-router';\nimport { login, fetchResults } from '../../redux/actions';\nimport styles from './login.module.css';\n\nexport function Login() {\n  const { user } = useSelector((state) => state);\n  const dispatch = useDispatch();\n\n  const [email, setEmail] = React.useState('');\n  const [password, setPassword] = React.useState('');\n  const handleLogin = ()=>{\n      dispatch(login({email, password}))\n  }\n\n  const handleEmailInput = (e)=>{\n      setEmail(e.target.value)\n  }\n\n  const handlePasswordInput = (e)=>{\n      setPassword(e.target.value)\n  }\n\n  debugger;\n  if(user.tokenReceived && !user.tokenExpired){\n    return <Redirect to=\"/dashboard\"/>\n  }\n\n  return (\n    <div>\n      <div className={styles.row} style={{marginTop: '100px'}}>\n        <input type='text' style={{margin: '5px', padding: '10px'}} placeholder=\"email\" onChange={handleEmailInput}/>\n   \n        <input type='text' style={{margin: '5px', padding: '10px'}} placeholder=\"password\" onChange={handlePasswordInput}/>\n\n        <button\n          className={styles.asyncButton}\n          onClick={handleLogin}\n        >\n          Login\n        </button>\n        {user.error? \"Some Error occurred. Please try again\": ''}\n      </div>\n    </div>\n  );\n}\n","import { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { Redirect } from 'react-router';\nimport { fetchResults } from '../../redux/actions';\nimport styles from './dashboard.module.css'; \n\nexport function Dashboard() {\n  const dispatch = useDispatch();\n  const { user } = useSelector((state) => state);\n  let { results, tokenExpired }  = user;\n\n  const savedToken = localStorage.getItem('token');\n\n  results = {\n      event: 'finish',\n      horse: {id: 1, name:'chepauk'},\n      time: 11232\n    }\n\n  useEffect(\n\t\t() =>{\n     if(!results){\n        dispatch(fetchResults(savedToken))\n      }\n    }, []);\n\n  if(tokenExpired || !savedToken){\n    return <Redirect to='login'/>\n  }\n\n\n  if(!results){\n    dispatch(fetchResults(localStorage.getItem('token')));\n    return \"Fetching Results...\"\n  }\n\n  // const horses = results.reduce((res, acc)=>{\n  //   return {\n  //     [res]\n  //   }\n  // })\n  // {\n  //   event: 'finish',\n  //   horse: [{id: 1, name:'chepauk'}],\n  //   time: 11232\n  // }\n  return (\n    <div>\n      <div className={styles.top}>\n        <h1>This is Dashboard</h1>\n\n        <div className={styles.column} >\n           <div>\n              <label>Event</label>\n              <span>{results.event}</span>\n           </div>\n            <div>\n              <label>Horse</label>\n              <span>{results.horse.name}</span>\n            </div>\n            <div>\n               <label>Time</label>\n               <span>{results.time}</span>\n            </div>\n       </div>\n       \n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Login } from './components/login';\nimport { Dashboard } from './components/dashboard';\nimport { HashRouter, Route, Switch, Redirect } from 'react-router-dom';\nimport './App.css';\n\nconst authenticated = localStorage.getItem('token');\n\nfunction App() {\n  return (\n    <div className=\"App\">\n            <HashRouter>\n              <Switch>\n              <Route path=\"/\" \n                  exact\n                  render={(props) =>\n                    (\n                      <Redirect\n                        to={{\n                          pathname: authenticated? '/dashboard' : '/login',\n                          state: { from: props.location },\n                        }}\n                      />\n                    )\n                  }></Route>\n                <Route exact path=\"/login\" component={Login}></Route>\n                <Route path=\"/dashboard\" \n                  exact\n                  render={(props) =>\n                    authenticated ? (\n                      <Dashboard {...props} />\n                    ) : (\n                      <Redirect\n                        to={{\n                          pathname: '/login',\n                          state: { from: props.location },\n                        }}\n                      />\n                    )\n                  }></Route>\n              </Switch>\n            </HashRouter>\n       {/* <Login /> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import { createSlice } from '@reduxjs/toolkit';\nimport {\n\tlogin,\n\tfetchResults,\n} from '../actions';\n\nconst initialState = {\n\tisLoading: true,\n};\n\nconst userSlice = createSlice({\n\tname: 'user',\n\tinitialState,\n\treducers: {},\n\textraReducers: {\n\n\t\t[login.pending]: (state) => {\n\t\t\tstate.isLoading = true;\n\t\t},\n\t\t[login.fulfilled]: (state, action) => {\n\t\t\tlocalStorage.setItem('token', action.payload.data.token);\n\t\t\tstate.tokenReceived = action.payload.data.token;\n\t\t},\n\t\t[login.rejected]: (state, action) => {\n\t\t\tstate.isLoading = false;\n\t\t\tstate.error = true;\n\t\t},\n\t\t[fetchResults.fulfilled]: (state, action) => {\n\t\t\tstate.results = action.payload.data;\n\t\t\tstate.error = false;\n\t\t},\n\t\t[fetchResults.rejected]: (state, action) => {\n\t\t\tif(action.payload.response.data.error === 'Access denied'){\n\t\t\t\tstate.tokenExpired = true;\n\t\t\t}\n\t\t}\n\t},\n});\n\nexport default userSlice;\n","import { configureStore } from '@reduxjs/toolkit';\nimport userSlice from '../redux/reducers/login'\n\nexport const store = configureStore({\n  reducer: {\n    user: userSlice.reducer,\n  },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport {store} from './app/store'\n\n// const store = configureStore();\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}